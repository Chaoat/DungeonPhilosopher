function innitiateMessageLog()
	MessageLog = {immediateMessage = nil, tutorials = {}}
	
	newTutorial('start', 'Welcome to dungeon philosopher!\nYou play as a humble goblin intent on changing the barbarous ways of your fellow dungeon dwellers, guiding them down a path of pacifism in place of brutality.\nYou must make your way through the three key dungeons of your region, convincing all monsters of your way.\nStart to make your way around the dungeon, controls to do so are shown in the top right of the screen.', 300, 200, 'screen', 1)
	newTutorial('inventory', "The aim of each dungeon is to bring the leader over to your philosophy, which is done by hitting them with your 'thoughts'. Thoughts are created from 'arguments'.\nHave a look at your current arguments by accessing your (i)nventory, and then pressing 1 or 2 to examine them.\nThe grid shows the thoughts that will be generated by the chosen argument, as well as their speed and power, and their energy cost.", 300, 250, 'screen', 3)
	newTutorial('grabbing', "This is a book. It contains a new argument. You can e(x)amine it to see what argument it contains, or just (g)rab it while standing over it to collect it.\nGrey books are books you already own, there's no point collecting doubles.", 200, 200, 'tile', 5)
	newTutorial('equipping', "You can only have four arguments memorized at a time, extra arguments will be placed in your (i)nventory. You can m(e)morize them, if you prefer them over your current books, or (r)ead them as one use per encounter arguments.", 300, 250, 'screen', 4)
	newTutorial('enemies', "Up ahead is an enemy! you will need to convince them of your argument, but first you should e(x)amine theirs to see what you're up against. They haven't noticed you yet, but will soon if you stick around", 200, 200, 'actor', 4)
	newTutorial('inCombat', "You are now in an argument, use the numbers 1 to 4 to select and use your arguments against your opponents, targetting them using enter, space or their corresponding number. Thoughts bounce off walls, so try and use the gemoetry to your advantage.\nYou might have noticed a white flash, this cleared out any nearby thoughts, in case you were trying to get them in before the argument started.\nWhile in combat your energy only recharges while standing still, and you can not memorize new arguments.", 400, 250, 'screen', 3)
	newTutorial('king', "This is the king. It's time to put all you've learned into practice. Once you've defeated him, (w)in the level.", 200, 200, 'actor', 5)
	newTutorial('damage', "You were just struck by one of your opponents thoughts (or possibly your own), lowering your confidence. You only have seven bars of confidence per dungeon, so try not to get hit again", 200, 150, 'screen', 4)
	newTutorial('enemyConvinced', "You just convinced your first opponent. Congratulations!. They might have left you a new argument to collect, so make sure to (g)rab it if they have.\nThey'll continue to wander around the dungeon, happy in their new state of enlightenment.", 200, 200, 'actor', 4)
	newTutorial('memorized', "Press numbers 1 to 4 to examine your currently memorized arguments.", 200, 100, 'screen', 1)
end

function activateTutorial(name, anchor)
	for i = 1, #MessageLog.tutorials do
		local tutorial = MessageLog.tutorials[i]
		if tutorial.name == name and not tutorial.activated then
			tutorial.anchor = anchor
			tutorial.activated = true
		end
	end
end

function newTutorial(name, text, width, height, anchor, stickTime)
	local tutorial = {name = name, text = text, width = width, height = height, anchorType = anchor, anchor = nil, lifeTime = stickTime, activated = false}
	table.insert(MessageLog.tutorials, tutorial)
end

function updateTutorials()
	local i = 1
	while i <= #MessageLog.tutorials do
		local tutorial = MessageLog.tutorials[i]
		if tutorial.activated then
			tutorial.lifeTime = tutorial.lifeTime - 1
			if tutorial.lifeTime <= 0 then
				table.remove(MessageLog.tutorials, i)
			else
				i = i + 1
			end
		else
			i = i + 1
		end
	end
end

function setImmediateMessage(message)
	MessageLog.immediateMessage = message
end

function drawImmediateMessage(x, y, width)
	if MessageLog.immediateMessage then
		love.graphics.setColor(0, 0, 0, 0.4)
		love.graphics.rectangle('fill', x, y, width, love.graphics.getHeight() - y)
		love.graphics.setColor(1, 1, 1, 1)
		love.graphics.printf(MessageLog.immediateMessage, x, y, width, 'left')
	end
end

function drawEndText()
	if Player.victory then
		local drawX = love.graphics.getWidth()/2 - 200
		local drawY = love.graphics.getHeight()/2 - 300
		drawBorderedBacking(drawX, drawY, 400, 200)
		love.graphics.setColor(1, 1, 1, 1)
		love.graphics.printf('Finally, pacifism reigns, and a new era of peace has dawned on the dungeon! Your name will forever echo down the annals of history.\nYou achieved your mighty goal in a meager ' .. Player.turnsProcessed .. ' turns.\n\nPress (q) to quit\nPress (d) to repeat your triumph', drawX + 5, drawY + 5, 390, 'center')
	elseif Player.dead then
		local drawX = love.graphics.getWidth()/2 - 200
		local drawY = love.graphics.getHeight()/2 - 300
		drawBorderedBacking(drawX, drawY, 400, 200)
		love.graphics.setColor(1, 1, 1, 1)
		love.graphics.printf('Faced with the shear elegance of your opponents arguments, you find yourself unable to speak another word. What were you thinking all this time anyway, a pacifist monster is almost an oxymoron. Slumping with your tail between your legs, you resign yourself to a life of endless violence and slaughter.\nYour failure spent ' .. Player.turnsProcessed .. ' turns.\n\nPress (q) to quit\nPress (d) to strive once more', drawX + 5, drawY + 5, 390, 'center')
	end
end

function drawTutorials(tileW, tileH)
	local xOffset = love.graphics.getWidth()/2 - cameraX*tileW
	local yOffset = love.graphics.getHeight()/2 - cameraY*tileH
	
	local lastDrawn = {}
	
	for i = 1, #MessageLog.tutorials do
		local tutorial = MessageLog.tutorials[i]
		if tutorial.activated then
			local drawX = 0
			local drawY = 0
			if tutorial.anchorType == 'screen' then
				drawX = love.graphics.getWidth()/2 + tutorial.anchor[1]
				drawY = love.graphics.getHeight()/2 + tutorial.anchor[2]
			elseif tutorial.anchorType == 'actor' or tutorial.anchorType == 'tile' then
				drawX = math.ceil(tutorial.anchor.x*tileW + xOffset) + 30
				drawY = math.ceil(tutorial.anchor.y*tileH + yOffset) - tutorial.height/2
			end
			
			for i = 1, #lastDrawn do
				local last = lastDrawn[i]
				if drawX + tutorial.width > last[1] and drawX < last[3] and drawY + tutorial.height > last[2] and drawY < last[4] then
					if drawY > (last[1] + last[3])/2 then
						drawY = last[4]
					else
						drawY = last[2] - tutorial.height
					end
				end
			end
			
			if drawX < 0 then
				drawX = 0
			end
			if drawY < 0 then
				drawY = 0
			end
			if drawX + tutorial.width > love.graphics.getWidth() then
				drawX = love.graphics.getWidth() - tutorial.width
			end
			if drawY + tutorial.height > love.graphics.getHeight() then
				drawY = love.graphics.getHeight() - tutorial.height
			end
			table.insert(lastDrawn, {drawX, drawY, drawX + tutorial.width, drawY + tutorial.height})
			
			drawBorderedBacking(drawX, drawY, tutorial.width, tutorial.height)
			love.graphics.setColor(1, 1, 1, 1)
			love.graphics.printf(tutorial.text, drawX + 5, drawY + 5, tutorial.width - 10, 'left')
		end
	end
end

function drawHelpText(x, y, width, player)
	local helpEntries = {}
	local helpText = ''
	
	if debugSettings.enableTutorial then
		table.insert(helpEntries, 't: Toggle tutorial')
	end
	if love.graphics.getWidth() == 800 and love.graphics.getHeight() == 600 then
		table.insert(helpEntries, 'drag window boarders: resize window')
	end
	if player.usingInventory then
		table.insert(helpEntries, listLetterRange(player.booksHeld) .. ': Select book')
		if player.usingInventory == 'info' then
			table.insert(helpEntries, '(1-4)' .. ': Select memorized book')
		end
		table.insert(helpEntries, 'esc: Close inventory')
	elseif player.targeting then
		table.insert(helpEntries, 'Numpad (1-9): Move cursor')
		if player.targeting == 'argument' then
			table.insert(helpEntries, 'esc: Cancel argument')
			table.insert(helpEntries, 'enter/space/argument key: Accept target')
		else
			table.insert(helpEntries, 'esc: Stop targeting')
		end
		
		if player.examining then
			table.insert(helpEntries, listLetterRange(player.examining.arguments) .. ': Examine enemy argument')
		end
	else
		if player.levelComplete then
			table.insert(helpEntries, 'w: Continue to next level')
		end
		table.insert(helpEntries, 'Numpad (1-9): Move')
		table.insert(helpEntries, 'Numpad 5: Skip turn')
		table.insert(helpEntries, 'x: Examine')
		table.insert(helpEntries, 'g: Pick up book')
		table.insert(helpEntries, 'i: Examine inventory')
		if #player.booksHeld > 0 then
			activateTutorial('equipping', {-150, -300})
			if not player.InCombat then
				table.insert(helpEntries, 'e: Equip book')
			end
			if #player.booksHeld >= 2 then
				table.insert(helpEntries, 's: Swap book letters')
			end
		end
		
		if player.inCombat then
			table.insert(helpEntries, "alt: View last turn's thoughts")
			if #player.booksHeld > 0 then
				table.insert(helpEntries, 'r: Read book')
			end
			if player.memorizedBooks[1] then
				local argument = getArgument(player.memorizedBooks[1].book)
				if argument.energyCost <= player.energy then
					table.insert(helpEntries, '1: Use ' .. argument.name)
				end
			end
			if player.memorizedBooks[2] then
				local argument = getArgument(player.memorizedBooks[2].book)
				if argument.energyCost <= player.energy then
					table.insert(helpEntries, '2: Use ' .. argument.name)
				end
			end
			if player.memorizedBooks[3] then
				local argument = getArgument(player.memorizedBooks[3].book)
				if argument.energyCost <= player.energy then
					table.insert(helpEntries, '3: Use ' .. argument.name)
				end
			end
			if player.memorizedBooks[4] then
				local argument = getArgument(player.memorizedBooks[4].book)
				if argument.energyCost <= player.energy then
					table.insert(helpEntries, '4: Use ' .. argument.name)
				end
			end
		else
			table.insert(helpEntries, "alt: View enemy movements")
		end
	end
	
	for i = 1, #helpEntries do
		if i > 1 then
			helpText = helpText .. '\n'
		end
		helpText = helpText .. helpEntries[i]
	end
	love.graphics.setColor(1, 1, 1, 1)
	love.graphics.printf(helpText, x, y, width, 'right')
end